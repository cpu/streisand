---
- name: Install the Keyserver Root CA for HPKS
  copy:
    src: "{{ gpg_ca_cert }}"
    # NOTE(@CPU): We put this in /etc/ssl/ not /etc/ssl/certs because we don't
    # want other parts of the sytem to trust this CA, we explicitly provide it
    # as an argument to the `gpg` command.
    dest: "/etc/ssl/{{ gpg_ca_cert }}"
    owner: root
    group: root
    mode: 0755

- name: "{{ project_signer }} signs the {{ project_name }} downloads. Import the correct GPG key."
  command: gpg --keyserver {{ gpg_key_server_address }} --keyserver-options ca-cert-file=/etc/ssl/{{ gpg_ca_cert }} --recv-keys {{ project_signing_key }}
  register: gpg_recv_keys_result
  changed_when: False
  until: gpg_recv_keys_result | success
  retries: 10
  delay: 5

- name: Register the GPG Key fingerprint output
  command: gpg --fingerprint {{ project_signing_key }}
  register: retrieved_fingerprint
  changed_when: False

- name: Make sure the retrieved fingerprint perfectly matches the expected fingerprint
  assert: { that: "project_expected_fingerprint in retrieved_fingerprint.stdout" }

- name: Download the {{ project_name }} files and signatures
  get_url:
    url: "{{ item }}"
    dest: "{{ project_download_location }}"
    owner: www-data
    group: www-data
    mode: 0644
  with_items: "{{ project_download_urls }}"

- name: If necessary, rename signature files to match the GPG default of '.asc'
  shell: for file in *.{{ signature_extension }}; do mv $file ${file%.*}.asc; done
  args:
    chdir: "{{ project_download_location }}"
  when: signature_extension != "asc"

- name: Register GPG signature verification results
  shell: for file in *.asc; do gpg --verify $file; done
  args:
    chdir: "{{ project_download_location }}"
  register: gpg_verification_results
  changed_when: False

- name: Make sure the {{ project_name }} files all passed GPG signature verfication
  assert: { that: "'BAD signature' not in gpg_verification_results.stderr" }
